name: Publish Release
on: workflow_dispatch
jobs:
  job:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/')
    steps:
    
    - name: Somebody Kill Me
      run: |
        # this *does* show the v7.7.10 release in the list
        echo "ALL RELEASES"
        curl -H "Accept: application/vnd.github.v3+json" -u "zpqrtbnk:${{secrets.MY_GITHUB_TOKEN_TESTREPO}}" https://api.github.com/repos/zpqrtbnk/test-repo/releases
        # this ... fails
        echo "TAG RELEASE"
        curl -H "Accept: application/vnd.github.v3+json" -u "zpqrtbnk:${{secrets.MY_GITHUB_TOKEN_TESTREPO}}" https://api.github.com/repos/zpqrtbnk/test-repo/releases/tags/v7.7.10
    
    - name: Validate the release
      uses: actions/github-script@v4
      with:
      
        # needed to see draft releases when getting all releases?
        github-token: ${{ secrets.MY_GITHUB_TOKEN_TESTREPO }}
        script: |
          const ver = "${{ github.ref }}".substring(19)
          const tag = "v" + ver
          var rel
          var rels
          try {
            rels = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            //rel = await github.repos.getReleaseByTag({
            //  owner: context.repo.owner,
            //  repo: context.repo.repo,
            //  tag: tag
            //})
          }
          catch (error) {
            core.setFailed(`Could not find a release for tag ${tag}.`)
            return
          }
          rel = null
          console.log('RELS:')
          console.log(rels)
          for (var r in rels) {
            console.log('REL:')
            console.log(r)
            if (r.tagName === tag) {
                rel = r
                break
            }
          }
          if (rel === null) {
            core.setFailed(`Could not find a release for tag ${tag}.`)
            return
          }
          if (!rel.draft) {
            core.setFailed(`Release for tag ${tag} is already published.`)
            return
          }
          try {
            const ref = await github.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/' + tag
            })
            core.setFailed(`Tag ${tag} already exists.`)
            return
          }
          catch (error) {
            // this is expected
          }
          // everything is OK
          
    - name: Checkout
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Configure repository
      shell: bash
      run: |
        git config user.email "github-actions@hazelcast.com"
        git config user.name "GitHub Actions (Build Release)"

    - name: Finalize the release
      run: |
        ref="${{ github.ref }}"
        branch="${ref:11}" # trim starting 'refs/heads/' (11 chars)
        version="${ref:19}" # trim starting 'refs/heads/release/' (19 chars)
        echo "Tag branch $branch as v$version"
        git tag v$version
        git push --tags
        #git push :$branch

    - name: Publish the release
      uses: actions/github-script@v4
      with:
        script: |
          const ver = "${{ github.ref }}".substring(19)
          const tag = "v" + ver
          const rel = await github.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: tag
          })
          await github.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: rel.id,
            draft: false
          })